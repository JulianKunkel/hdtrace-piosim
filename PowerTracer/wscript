#!/usr/bin/env python

import os
import subprocess

import Options
import Utils

APPNAME = 'PowerTracer'
VERSION = '0.9'

srcdir = '.'
blddir = 'build'

def _getconf (key):
	# FIXME Maybe use os.confstr().
	p = subprocess.Popen(['getconf', key], stdout=subprocess.PIPE, close_fds=True)
	v = p.communicate()[0].strip()

	if not v:
		return []

	return Utils.to_list(v)

def set_options (opt):
	opt.add_option('--with-hdtwlib-static', action='store', default=None, help='xxx')

def configure (conf):
	conf.check_tool('gcc')

	conf.env.CCFLAGS += ['-std=gnu99']

	conf.env.CCFLAGS += _getconf('LFS_CFLAGS')
	conf.env.LDFLAGS += _getconf('LFS_LDFLAGS')
	conf.env.LDFLAGS += _getconf('LFS_LIBS')

	conf.check_cc(lib='pthread')

	if Options.options.with_hdtwlib_static:
		hdtwlib = os.path.abspath(Options.options.with_hdtwlib_static)
		conf.check_cc(staticlib='hdTracing', ccflags='-I%s/include' % (hdtwlib), ldflags='-L%s/lib' % (hdtwlib), uselib_store='HDTRACING')
		conf.env.LIBPATH_HDTRACING = '%s/lib' % (hdtwlib)
	else:
		conf.check_cc(staticlib='hdTracing', uselib_store='HDTRACING')

	#conf.env.CCFLAGS += ['-Wextra', '-Wno-missing-field-initializers', '-Wno-unused-parameter', '-Wold-style-definition', '-Wdeclaration-after-statement', '-Wmissing-declarations', '-Wmissing-prototypes', '-Wredundant-decls', '-Wmissing-noreturn', '-Wshadow', '-Wpointer-arith', '-Wcast-align', '-Wwrite-strings', '-Winline', '-Wformat-nonliteral', '-Wformat-security', '-Wswitch-enum', '-Wswitch-default', '-Winit-self', '-Wmissing-include-dirs', '-Wundef', '-Waggregate-return', '-Wmissing-format-attribute', '-Wnested-externs', '-Wstrict-prototypes']

	conf.sub_config('examples')
	conf.sub_config('src')

	'''
# Enable debugging flags when enabled
AC_ARG_ENABLE(debugging,
	      AC_HELP_STRING([--enable-debugging],[enable debugging flags and output (overrides CFLAGS argument)]),
	      [
	       CFLAGS="-g -O0 -ggdb -DDEBUG"
	      ]
	     )

# Enable compiler warnings when enabled and using gcc
AC_ARG_ENABLE(warnings,
	      AC_HELP_STRING([--enable-warnings],[enable lots of compiler warnings (only with GCC)]),
	      [
	       if test "$GCC" != "yes"
	       then
		       CFLAGS="${CFLAGS} -pedantic -Wall -Wextra -Waggregate-return -Wcast-align -Wcast-qual \
		               -Wconversion -Wfloat-equal -Wformat=2 -Winit-self -Winline -Wmissing-declarations \
			       -Wmissing-format-attribute -Wmissing-include-dirs -Wmissing-noreturn \
			       -Wmissing-prototypes -Wnested-externs -Wold-style-definition -Wredundant-decls \
			       -Wshadow -Wstrict-prototypes -Wswitch-default -Wswitch-enum -Wundef -Wwrite-strings"
		else
			AC_MSG_WARN(["--enable-warnings" only does something when using gcc])
		fi
	       ]
	      )

# Disable assert macro for faster code
AC_ARG_ENABLE(asserts,
	      AC_HELP_STRING([--disable-asserts],[disable assertion code (should produce faster code)]),
	      [
	       if test "$enableval" == "no"
	       then
		       CPPFLAGS="${CPPFLAGS} -DNDEBUG"
	       fi
	      ]
	     )
	'''

def build (bld):
	bld.add_subdirs('examples')
#	bld.add_subdirs('include')
	bld.add_subdirs('src')

	'''
doxyINPUT = $(SRC_DIR) $(INC_DIR)

devdoc: force
	OUTDIR=$(DOC_DIR) INPUT="$(doxyINPUT)" doxygen $(top_srcdir)/Doxyfile

apidoc: force
	mkdir -p $(DOC_DIR)/api
	OUTDIR=$(DOC_DIR)/api INPUT="$(doxyINPUT)" doxygen $(top_srcdir)/Doxyfile.api_only
	'''
