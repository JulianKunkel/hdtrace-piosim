/*
 * HDMPITracer.h
 * Contains the API which is visible within MPI programs
 *
 *  Created on: 05.05.2009
 *      Author: julian
 */

#ifndef HDMPITRACER_H_
#define HDMPITRACER_H_

#include "hdTrace.h"
#include "hdTopo.h"

/**
 * Return the tracefile used to store the threads values in the current topology
 */
hdTrace * hdMPI_getThreadTracefile();

/**
 * Return the topology for the current thread
 */
hdTopology * hdMPI_getThreadTopology();

/**
 * Enable the tracing for this thread (automatically invoked upon creation)
 */
int hdMPI_threadEnableTracing();

/**
 * Disable the tracing for this thread (can be reactivated via enable)
 */
int hdMPI_threadDisableTracing();


/**
 * Initalize tracing, to allow thread to use tracing.
 */
void hdMPI_threadInitTracing();

/**
 * Finalize trace file for the thread.
 */
void hdMPI_threadFinalizeTracing();

/**
 * Mark the start of a new state
 */
void hdMPI_threadLogStateStart(const char * name);

/**
 * Mark the end of a state and write it
 */
void hdMPI_threadLogStateEnd(void);


/**
 * Log Attributes
 */
#define hdMPI_threadLogAttributes(valueFormat, ...) hdT_logAttributes(hdMPI_getThreadTracefile(), valueFormat, __VA_ARGS__)

/* Log Element
*
* Logs an element for the latest open state. A state is open
* if \a hdT_logStateStart without a corresponding \a hdT_logStateEnd
* has been called.
*/
#define hdMPI_threadLogElement(name, valueFormat, ... ) hdT_logElement(hdMPI_getThreadTracefile(), name, valueFormat, __VA_ARGS__)

#define hdMPI_threadWriteInfo(format, ...) hdT_writeInfo(hdMPI_getThreadTracefile(), format, __VA_ARGS__)


/* here the mpi tracing function declarations are appended by create_sim-wrapper.py */
