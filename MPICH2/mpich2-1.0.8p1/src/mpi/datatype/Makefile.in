# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
VERBOSE         = 1
AR              = @AR@
RANLIB          = @RANLIB@
master_top_srcdir  = @master_top_srcdir@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
top_srcdir      = @top_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@

CC              = @CC@
CFLAGS          = @CFLAGS@
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
DOCTEXT         = @DOCTEXT@
mpi_sources = address.c get_address.c get_count.c \
 get_elements.c pack.c unpack.c pack_size.c status_set_elements.c \
 type_get_name.c \
 type_set_name.c type_size.c type_extent.c type_vector.c type_commit.c \
 type_indexed.c type_hindexed.c type_struct.c \
 type_contiguous.c type_free.c type_hvector.c type_dup.c \
 type_get_envelope.c type_get_contents.c \
 type_ub.c type_lb.c type_get_extent.c type_get_true_extent.c \
 type_match_size.c \
 type_create_struct.c type_create_hindexed.c type_create_hvector.c \
 pack_external.c pack_external_size.c unpack_external.c \
 type_create_indexed_block.c type_create_resized.c \
 type_create_darray.c type_create_subarray.c
win_sources = register_datarep.c
HEADERS = datatype.h
INCLUDES = -I../../include -I${top_srcdir}/src/include

.SUFFIXES:
.SUFFIXES: .o .lo .c .man .html .latex .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)
.c.man:
	$(DOCTEXT) -man -mpath ../../../man/man3 -ext 3 -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.html:
	$(DOCTEXT) -html -mpath ../../../www/www3  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.latex:
	$(DOCTEXT) -latex -mpath ../../../doc/refman  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../../../ \
	-configdir=. \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../../../ && \
	if [ -x config.status ] ; then CONFIG_FILES=src/mpi/datatype/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 .libstamp2 .libstamp3 
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean:  distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: .libstamp0 ../../../lib/lib${MPILIBNAME}.a
	@if [ -n "@NO_WEAK_SYM@" ] ; then \
	    ${MAKE} .libstamp2 ; \
	fi
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 ; \
	    if [ -n "@NO_WEAK_SYM@" ] ; then \
	        ${MAKE} .libstamp3 ; \
	    fi ; \
	fi

.libstamp0 ../../../lib/lib${MPILIBNAME}.a: address.o get_address.o \
	get_count.o get_elements.o pack.o unpack.o pack_size.o \
	status_set_elements.o type_get_name.o type_set_name.o type_size.o \
	type_extent.o type_vector.o type_commit.o type_indexed.o \
	type_hindexed.o type_struct.o type_contiguous.o type_free.o \
	type_hvector.o type_dup.o type_get_envelope.o type_get_contents.o \
	type_ub.o type_lb.o type_get_extent.o type_get_true_extent.o \
	type_match_size.o type_create_struct.o type_create_hindexed.o \
	type_create_hvector.o pack_external.o pack_external_size.o \
	unpack_external.o type_create_indexed_block.o type_create_resized.o \
	type_create_darray.o type_create_subarray.o typeutil.o 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.a $?
	${RANLIB} ../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../lib/lib${MPILIBNAME}.la: address.lo get_address.lo \
	get_count.lo get_elements.lo pack.lo unpack.lo pack_size.lo \
	status_set_elements.lo type_get_name.lo type_set_name.lo type_size.lo \
	type_extent.lo type_vector.lo type_commit.lo type_indexed.lo \
	type_hindexed.lo type_struct.lo type_contiguous.lo type_free.lo \
	type_hvector.lo type_dup.lo type_get_envelope.lo type_get_contents.lo \
	type_ub.lo type_lb.lo type_get_extent.lo type_get_true_extent.lo \
	type_match_size.lo type_create_struct.lo type_create_hindexed.lo \
	type_create_hvector.lo pack_external.lo pack_external_size.lo \
	unpack_external.lo type_create_indexed_block.lo \
	type_create_resized.lo type_create_darray.lo type_create_subarray.lo \
	typeutil.lo 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1

# --------------------------------------------------------------------------
.libstamp2: _address.o _get_address.o _get_count.o _get_elements.o _pack.o _unpack.o \
	_pack_size.o _status_set_elements.o _type_get_name.o _type_set_name.o \
	_type_size.o _type_extent.o _type_vector.o _type_commit.o \
	_type_indexed.o _type_hindexed.o _type_struct.o _type_contiguous.o \
	_type_free.o _type_hvector.o _type_dup.o _type_get_envelope.o \
	_type_get_contents.o _type_ub.o _type_lb.o _type_get_extent.o \
	_type_get_true_extent.o _type_match_size.o _type_create_struct.o \
	_type_create_hindexed.o _type_create_hvector.o _pack_external.o \
	_pack_external_size.o _unpack_external.o _type_create_indexed_block.o \
	_type_create_resized.o _type_create_darray.o _type_create_subarray.o 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  RANLIB          lib${PMPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${PMPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${PMPILIBNAME}.a
	date > .libstamp2
.libstamp3: _address.lo _get_address.lo _get_count.lo _get_elements.lo _pack.lo \
	_unpack.lo _pack_size.lo _status_set_elements.lo _type_get_name.lo \
	_type_set_name.lo _type_size.lo _type_extent.lo _type_vector.lo \
	_type_commit.lo _type_indexed.lo _type_hindexed.lo _type_struct.lo \
	_type_contiguous.lo _type_free.lo _type_hvector.lo _type_dup.lo \
	_type_get_envelope.lo _type_get_contents.lo _type_ub.lo _type_lb.lo \
	_type_get_extent.lo _type_get_true_extent.lo _type_match_size.lo \
	_type_create_struct.lo _type_create_hindexed.lo \
	_type_create_hvector.lo _pack_external.lo _pack_external_size.lo \
	_unpack_external.lo _type_create_indexed_block.lo \
	_type_create_resized.lo _type_create_darray.lo \
	_type_create_subarray.lo 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.la $?; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.la $?
	date > .libstamp3
_address.o: address.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/address.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/address.c -o _address.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/address.c -o _address.o
_address.lo: address.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/address.c -o _address.lo
_get_address.o: get_address.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/get_address.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_address.c -o _get_address.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_address.c -o _get_address.o
_get_address.lo: get_address.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/get_address.c -o _get_address.lo
_get_count.o: get_count.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/get_count.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_count.c -o _get_count.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_count.c -o _get_count.o
_get_count.lo: get_count.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/get_count.c -o _get_count.lo
_get_elements.o: get_elements.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/get_elements.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_elements.c -o _get_elements.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/get_elements.c -o _get_elements.o
_get_elements.lo: get_elements.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/get_elements.c -o _get_elements.lo
_pack.o: pack.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/pack.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack.c -o _pack.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack.c -o _pack.o
_pack.lo: pack.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/pack.c -o _pack.lo
_unpack.o: unpack.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/unpack.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack.c -o _unpack.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack.c -o _unpack.o
_unpack.lo: unpack.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack.c -o _unpack.lo
_pack_size.o: pack_size.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/pack_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_size.c -o _pack_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_size.c -o _pack_size.o
_pack_size.lo: pack_size.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_size.c -o _pack_size.lo
_status_set_elements.o: status_set_elements.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/status_set_elements.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/status_set_elements.c -o _status_set_elements.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/status_set_elements.c -o _status_set_elements.o
_status_set_elements.lo: status_set_elements.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/status_set_elements.c -o _status_set_elements.lo
_type_get_name.o: type_get_name.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_get_name.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_name.c -o _type_get_name.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_name.c -o _type_get_name.o
_type_get_name.lo: type_get_name.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_name.c -o _type_get_name.lo
_type_set_name.o: type_set_name.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_set_name.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_set_name.c -o _type_set_name.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_set_name.c -o _type_set_name.o
_type_set_name.lo: type_set_name.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_set_name.c -o _type_set_name.lo
_type_size.o: type_size.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_size.c -o _type_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_size.c -o _type_size.o
_type_size.lo: type_size.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_size.c -o _type_size.lo
_type_extent.o: type_extent.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_extent.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_extent.c -o _type_extent.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_extent.c -o _type_extent.o
_type_extent.lo: type_extent.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_extent.c -o _type_extent.lo
_type_vector.o: type_vector.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_vector.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_vector.c -o _type_vector.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_vector.c -o _type_vector.o
_type_vector.lo: type_vector.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_vector.c -o _type_vector.lo
_type_commit.o: type_commit.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_commit.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_commit.c -o _type_commit.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_commit.c -o _type_commit.o
_type_commit.lo: type_commit.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_commit.c -o _type_commit.lo
_type_indexed.o: type_indexed.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_indexed.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_indexed.c -o _type_indexed.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_indexed.c -o _type_indexed.o
_type_indexed.lo: type_indexed.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_indexed.c -o _type_indexed.lo
_type_hindexed.o: type_hindexed.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_hindexed.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hindexed.c -o _type_hindexed.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hindexed.c -o _type_hindexed.o
_type_hindexed.lo: type_hindexed.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hindexed.c -o _type_hindexed.lo
_type_struct.o: type_struct.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_struct.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_struct.c -o _type_struct.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_struct.c -o _type_struct.o
_type_struct.lo: type_struct.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_struct.c -o _type_struct.lo
_type_contiguous.o: type_contiguous.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_contiguous.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_contiguous.c -o _type_contiguous.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_contiguous.c -o _type_contiguous.o
_type_contiguous.lo: type_contiguous.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_contiguous.c -o _type_contiguous.lo
_type_free.o: type_free.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_free.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_free.c -o _type_free.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_free.c -o _type_free.o
_type_free.lo: type_free.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_free.c -o _type_free.lo
_type_hvector.o: type_hvector.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_hvector.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hvector.c -o _type_hvector.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hvector.c -o _type_hvector.o
_type_hvector.lo: type_hvector.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_hvector.c -o _type_hvector.lo
_type_dup.o: type_dup.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_dup.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_dup.c -o _type_dup.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_dup.c -o _type_dup.o
_type_dup.lo: type_dup.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_dup.c -o _type_dup.lo
_type_get_envelope.o: type_get_envelope.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_get_envelope.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_envelope.c -o _type_get_envelope.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_envelope.c -o _type_get_envelope.o
_type_get_envelope.lo: type_get_envelope.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_envelope.c -o _type_get_envelope.lo
_type_get_contents.o: type_get_contents.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_get_contents.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_contents.c -o _type_get_contents.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_contents.c -o _type_get_contents.o
_type_get_contents.lo: type_get_contents.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_contents.c -o _type_get_contents.lo
_type_ub.o: type_ub.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_ub.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_ub.c -o _type_ub.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_ub.c -o _type_ub.o
_type_ub.lo: type_ub.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_ub.c -o _type_ub.lo
_type_lb.o: type_lb.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_lb.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_lb.c -o _type_lb.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_lb.c -o _type_lb.o
_type_lb.lo: type_lb.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_lb.c -o _type_lb.lo
_type_get_extent.o: type_get_extent.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_get_extent.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_extent.c -o _type_get_extent.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_extent.c -o _type_get_extent.o
_type_get_extent.lo: type_get_extent.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_extent.c -o _type_get_extent.lo
_type_get_true_extent.o: type_get_true_extent.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_get_true_extent.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_true_extent.c -o _type_get_true_extent.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_true_extent.c -o _type_get_true_extent.o
_type_get_true_extent.lo: type_get_true_extent.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_get_true_extent.c -o _type_get_true_extent.lo
_type_match_size.o: type_match_size.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_match_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_match_size.c -o _type_match_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_match_size.c -o _type_match_size.o
_type_match_size.lo: type_match_size.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_match_size.c -o _type_match_size.lo
_type_create_struct.o: type_create_struct.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_struct.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_struct.c -o _type_create_struct.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_struct.c -o _type_create_struct.o
_type_create_struct.lo: type_create_struct.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_struct.c -o _type_create_struct.lo
_type_create_hindexed.o: type_create_hindexed.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_hindexed.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hindexed.c -o _type_create_hindexed.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hindexed.c -o _type_create_hindexed.o
_type_create_hindexed.lo: type_create_hindexed.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hindexed.c -o _type_create_hindexed.lo
_type_create_hvector.o: type_create_hvector.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_hvector.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hvector.c -o _type_create_hvector.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hvector.c -o _type_create_hvector.o
_type_create_hvector.lo: type_create_hvector.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_hvector.c -o _type_create_hvector.lo
_pack_external.o: pack_external.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/pack_external.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external.c -o _pack_external.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external.c -o _pack_external.o
_pack_external.lo: pack_external.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external.c -o _pack_external.lo
_pack_external_size.o: pack_external_size.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/pack_external_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external_size.c -o _pack_external_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external_size.c -o _pack_external_size.o
_pack_external_size.lo: pack_external_size.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/pack_external_size.c -o _pack_external_size.lo
_unpack_external.o: unpack_external.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/unpack_external.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack_external.c -o _unpack_external.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack_external.c -o _unpack_external.o
_unpack_external.lo: unpack_external.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/unpack_external.c -o _unpack_external.lo
_type_create_indexed_block.o: type_create_indexed_block.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_indexed_block.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_indexed_block.c -o _type_create_indexed_block.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_indexed_block.c -o _type_create_indexed_block.o
_type_create_indexed_block.lo: type_create_indexed_block.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_indexed_block.c -o _type_create_indexed_block.lo
_type_create_resized.o: type_create_resized.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_resized.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_resized.c -o _type_create_resized.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_resized.c -o _type_create_resized.o
_type_create_resized.lo: type_create_resized.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_resized.c -o _type_create_resized.lo
_type_create_darray.o: type_create_darray.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_darray.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_darray.c -o _type_create_darray.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_darray.c -o _type_create_darray.o
_type_create_darray.lo: type_create_darray.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_darray.c -o _type_create_darray.lo
_type_create_subarray.o: type_create_subarray.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/type_create_subarray.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_subarray.c -o _type_create_subarray.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_subarray.c -o _type_create_subarray.o
_type_create_subarray.lo: type_create_subarray.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/type_create_subarray.c -o _type_create_subarray.lo
# --------------------------------------------------------------------------
coverage: 
	-@for file in $(mpi_sources) typeutil.c ; do \
		gcov -b -f $$file ; done
# --------------------------------------------------------------------------
mandoc: ${mpi_sources:.c=.man}
htmldoc: ${mpi_sources:.c=.html}
latexdoc: ${mpi_sources:.c=.latex}
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dependencies
DEPS_DIR = .deps
MAKE_DEPEND_C   = @MAKE_DEPEND_C@ $(DEFS) $(INCLUDES) $(CPPFLAGS)

dependencies: $(DEPS_DIR)/timestamp
$(DEPS_DIR)/address.d: $(srcdir)/address.c
	$(MAKE_DEPEND_C) -MT '_address.o address.o' $(srcdir)/address.c >$(DEPS_DIR)/address.d
$(DEPS_DIR)/get_address.d: $(srcdir)/get_address.c
	$(MAKE_DEPEND_C) -MT '_get_address.o get_address.o' $(srcdir)/get_address.c >$(DEPS_DIR)/get_address.d
$(DEPS_DIR)/get_count.d: $(srcdir)/get_count.c
	$(MAKE_DEPEND_C) -MT '_get_count.o get_count.o' $(srcdir)/get_count.c >$(DEPS_DIR)/get_count.d
$(DEPS_DIR)/get_elements.d: $(srcdir)/get_elements.c
	$(MAKE_DEPEND_C) -MT '_get_elements.o get_elements.o' $(srcdir)/get_elements.c >$(DEPS_DIR)/get_elements.d
$(DEPS_DIR)/pack.d: $(srcdir)/pack.c
	$(MAKE_DEPEND_C) -MT '_pack.o pack.o' $(srcdir)/pack.c >$(DEPS_DIR)/pack.d
$(DEPS_DIR)/unpack.d: $(srcdir)/unpack.c
	$(MAKE_DEPEND_C) -MT '_unpack.o unpack.o' $(srcdir)/unpack.c >$(DEPS_DIR)/unpack.d
$(DEPS_DIR)/pack_size.d: $(srcdir)/pack_size.c
	$(MAKE_DEPEND_C) -MT '_pack_size.o pack_size.o' $(srcdir)/pack_size.c >$(DEPS_DIR)/pack_size.d
$(DEPS_DIR)/status_set_elements.d: $(srcdir)/status_set_elements.c
	$(MAKE_DEPEND_C) -MT '_status_set_elements.o status_set_elements.o' $(srcdir)/status_set_elements.c >$(DEPS_DIR)/status_set_elements.d
$(DEPS_DIR)/type_get_name.d: $(srcdir)/type_get_name.c
	$(MAKE_DEPEND_C) -MT '_type_get_name.o type_get_name.o' $(srcdir)/type_get_name.c >$(DEPS_DIR)/type_get_name.d
$(DEPS_DIR)/type_set_name.d: $(srcdir)/type_set_name.c
	$(MAKE_DEPEND_C) -MT '_type_set_name.o type_set_name.o' $(srcdir)/type_set_name.c >$(DEPS_DIR)/type_set_name.d
$(DEPS_DIR)/type_size.d: $(srcdir)/type_size.c
	$(MAKE_DEPEND_C) -MT '_type_size.o type_size.o' $(srcdir)/type_size.c >$(DEPS_DIR)/type_size.d
$(DEPS_DIR)/type_extent.d: $(srcdir)/type_extent.c
	$(MAKE_DEPEND_C) -MT '_type_extent.o type_extent.o' $(srcdir)/type_extent.c >$(DEPS_DIR)/type_extent.d
$(DEPS_DIR)/type_vector.d: $(srcdir)/type_vector.c
	$(MAKE_DEPEND_C) -MT '_type_vector.o type_vector.o' $(srcdir)/type_vector.c >$(DEPS_DIR)/type_vector.d
$(DEPS_DIR)/type_commit.d: $(srcdir)/type_commit.c
	$(MAKE_DEPEND_C) -MT '_type_commit.o type_commit.o' $(srcdir)/type_commit.c >$(DEPS_DIR)/type_commit.d
$(DEPS_DIR)/type_indexed.d: $(srcdir)/type_indexed.c
	$(MAKE_DEPEND_C) -MT '_type_indexed.o type_indexed.o' $(srcdir)/type_indexed.c >$(DEPS_DIR)/type_indexed.d
$(DEPS_DIR)/type_hindexed.d: $(srcdir)/type_hindexed.c
	$(MAKE_DEPEND_C) -MT '_type_hindexed.o type_hindexed.o' $(srcdir)/type_hindexed.c >$(DEPS_DIR)/type_hindexed.d
$(DEPS_DIR)/type_struct.d: $(srcdir)/type_struct.c
	$(MAKE_DEPEND_C) -MT '_type_struct.o type_struct.o' $(srcdir)/type_struct.c >$(DEPS_DIR)/type_struct.d
$(DEPS_DIR)/type_contiguous.d: $(srcdir)/type_contiguous.c
	$(MAKE_DEPEND_C) -MT '_type_contiguous.o type_contiguous.o' $(srcdir)/type_contiguous.c >$(DEPS_DIR)/type_contiguous.d
$(DEPS_DIR)/type_free.d: $(srcdir)/type_free.c
	$(MAKE_DEPEND_C) -MT '_type_free.o type_free.o' $(srcdir)/type_free.c >$(DEPS_DIR)/type_free.d
$(DEPS_DIR)/type_hvector.d: $(srcdir)/type_hvector.c
	$(MAKE_DEPEND_C) -MT '_type_hvector.o type_hvector.o' $(srcdir)/type_hvector.c >$(DEPS_DIR)/type_hvector.d
$(DEPS_DIR)/type_dup.d: $(srcdir)/type_dup.c
	$(MAKE_DEPEND_C) -MT '_type_dup.o type_dup.o' $(srcdir)/type_dup.c >$(DEPS_DIR)/type_dup.d
$(DEPS_DIR)/type_get_envelope.d: $(srcdir)/type_get_envelope.c
	$(MAKE_DEPEND_C) -MT '_type_get_envelope.o type_get_envelope.o' $(srcdir)/type_get_envelope.c >$(DEPS_DIR)/type_get_envelope.d
$(DEPS_DIR)/type_get_contents.d: $(srcdir)/type_get_contents.c
	$(MAKE_DEPEND_C) -MT '_type_get_contents.o type_get_contents.o' $(srcdir)/type_get_contents.c >$(DEPS_DIR)/type_get_contents.d
$(DEPS_DIR)/type_ub.d: $(srcdir)/type_ub.c
	$(MAKE_DEPEND_C) -MT '_type_ub.o type_ub.o' $(srcdir)/type_ub.c >$(DEPS_DIR)/type_ub.d
$(DEPS_DIR)/type_lb.d: $(srcdir)/type_lb.c
	$(MAKE_DEPEND_C) -MT '_type_lb.o type_lb.o' $(srcdir)/type_lb.c >$(DEPS_DIR)/type_lb.d
$(DEPS_DIR)/type_get_extent.d: $(srcdir)/type_get_extent.c
	$(MAKE_DEPEND_C) -MT '_type_get_extent.o type_get_extent.o' $(srcdir)/type_get_extent.c >$(DEPS_DIR)/type_get_extent.d
$(DEPS_DIR)/type_get_true_extent.d: $(srcdir)/type_get_true_extent.c
	$(MAKE_DEPEND_C) -MT '_type_get_true_extent.o type_get_true_extent.o' $(srcdir)/type_get_true_extent.c >$(DEPS_DIR)/type_get_true_extent.d
$(DEPS_DIR)/type_match_size.d: $(srcdir)/type_match_size.c
	$(MAKE_DEPEND_C) -MT '_type_match_size.o type_match_size.o' $(srcdir)/type_match_size.c >$(DEPS_DIR)/type_match_size.d
$(DEPS_DIR)/type_create_struct.d: $(srcdir)/type_create_struct.c
	$(MAKE_DEPEND_C) -MT '_type_create_struct.o type_create_struct.o' $(srcdir)/type_create_struct.c >$(DEPS_DIR)/type_create_struct.d
$(DEPS_DIR)/type_create_hindexed.d: $(srcdir)/type_create_hindexed.c
	$(MAKE_DEPEND_C) -MT '_type_create_hindexed.o type_create_hindexed.o' $(srcdir)/type_create_hindexed.c >$(DEPS_DIR)/type_create_hindexed.d
$(DEPS_DIR)/type_create_hvector.d: $(srcdir)/type_create_hvector.c
	$(MAKE_DEPEND_C) -MT '_type_create_hvector.o type_create_hvector.o' $(srcdir)/type_create_hvector.c >$(DEPS_DIR)/type_create_hvector.d
$(DEPS_DIR)/pack_external.d: $(srcdir)/pack_external.c
	$(MAKE_DEPEND_C) -MT '_pack_external.o pack_external.o' $(srcdir)/pack_external.c >$(DEPS_DIR)/pack_external.d
$(DEPS_DIR)/pack_external_size.d: $(srcdir)/pack_external_size.c
	$(MAKE_DEPEND_C) -MT '_pack_external_size.o pack_external_size.o' $(srcdir)/pack_external_size.c >$(DEPS_DIR)/pack_external_size.d
$(DEPS_DIR)/unpack_external.d: $(srcdir)/unpack_external.c
	$(MAKE_DEPEND_C) -MT '_unpack_external.o unpack_external.o' $(srcdir)/unpack_external.c >$(DEPS_DIR)/unpack_external.d
$(DEPS_DIR)/type_create_indexed_block.d: $(srcdir)/type_create_indexed_block.c
	$(MAKE_DEPEND_C) -MT '_type_create_indexed_block.o type_create_indexed_block.o' $(srcdir)/type_create_indexed_block.c >$(DEPS_DIR)/type_create_indexed_block.d
$(DEPS_DIR)/type_create_resized.d: $(srcdir)/type_create_resized.c
	$(MAKE_DEPEND_C) -MT '_type_create_resized.o type_create_resized.o' $(srcdir)/type_create_resized.c >$(DEPS_DIR)/type_create_resized.d
$(DEPS_DIR)/type_create_darray.d: $(srcdir)/type_create_darray.c
	$(MAKE_DEPEND_C) -MT '_type_create_darray.o type_create_darray.o' $(srcdir)/type_create_darray.c >$(DEPS_DIR)/type_create_darray.d
$(DEPS_DIR)/type_create_subarray.d: $(srcdir)/type_create_subarray.c
	$(MAKE_DEPEND_C) -MT '_type_create_subarray.o type_create_subarray.o' $(srcdir)/type_create_subarray.c >$(DEPS_DIR)/type_create_subarray.d
$(DEPS_DIR)/typeutil.d: $(srcdir)/typeutil.c
	$(MAKE_DEPEND_C) -MT '_typeutil.o typeutil.o' $(srcdir)/typeutil.c >$(DEPS_DIR)/typeutil.d
$(DEPS_DIR)/timestamp: $(mpi_sources) typeutil.c Makefile
	rm -f $(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_address.o address.o' $(srcdir)/address.c >$(DEPS_DIR)/address.d
	echo "include $(DEPS_DIR)/address.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_get_address.o get_address.o' $(srcdir)/get_address.c >$(DEPS_DIR)/get_address.d
	echo "include $(DEPS_DIR)/get_address.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_get_count.o get_count.o' $(srcdir)/get_count.c >$(DEPS_DIR)/get_count.d
	echo "include $(DEPS_DIR)/get_count.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_get_elements.o get_elements.o' $(srcdir)/get_elements.c >$(DEPS_DIR)/get_elements.d
	echo "include $(DEPS_DIR)/get_elements.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_pack.o pack.o' $(srcdir)/pack.c >$(DEPS_DIR)/pack.d
	echo "include $(DEPS_DIR)/pack.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_unpack.o unpack.o' $(srcdir)/unpack.c >$(DEPS_DIR)/unpack.d
	echo "include $(DEPS_DIR)/unpack.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_pack_size.o pack_size.o' $(srcdir)/pack_size.c >$(DEPS_DIR)/pack_size.d
	echo "include $(DEPS_DIR)/pack_size.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_status_set_elements.o status_set_elements.o' $(srcdir)/status_set_elements.c >$(DEPS_DIR)/status_set_elements.d
	echo "include $(DEPS_DIR)/status_set_elements.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_get_name.o type_get_name.o' $(srcdir)/type_get_name.c >$(DEPS_DIR)/type_get_name.d
	echo "include $(DEPS_DIR)/type_get_name.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_set_name.o type_set_name.o' $(srcdir)/type_set_name.c >$(DEPS_DIR)/type_set_name.d
	echo "include $(DEPS_DIR)/type_set_name.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_size.o type_size.o' $(srcdir)/type_size.c >$(DEPS_DIR)/type_size.d
	echo "include $(DEPS_DIR)/type_size.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_extent.o type_extent.o' $(srcdir)/type_extent.c >$(DEPS_DIR)/type_extent.d
	echo "include $(DEPS_DIR)/type_extent.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_vector.o type_vector.o' $(srcdir)/type_vector.c >$(DEPS_DIR)/type_vector.d
	echo "include $(DEPS_DIR)/type_vector.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_commit.o type_commit.o' $(srcdir)/type_commit.c >$(DEPS_DIR)/type_commit.d
	echo "include $(DEPS_DIR)/type_commit.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_indexed.o type_indexed.o' $(srcdir)/type_indexed.c >$(DEPS_DIR)/type_indexed.d
	echo "include $(DEPS_DIR)/type_indexed.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_hindexed.o type_hindexed.o' $(srcdir)/type_hindexed.c >$(DEPS_DIR)/type_hindexed.d
	echo "include $(DEPS_DIR)/type_hindexed.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_struct.o type_struct.o' $(srcdir)/type_struct.c >$(DEPS_DIR)/type_struct.d
	echo "include $(DEPS_DIR)/type_struct.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_contiguous.o type_contiguous.o' $(srcdir)/type_contiguous.c >$(DEPS_DIR)/type_contiguous.d
	echo "include $(DEPS_DIR)/type_contiguous.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_free.o type_free.o' $(srcdir)/type_free.c >$(DEPS_DIR)/type_free.d
	echo "include $(DEPS_DIR)/type_free.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_hvector.o type_hvector.o' $(srcdir)/type_hvector.c >$(DEPS_DIR)/type_hvector.d
	echo "include $(DEPS_DIR)/type_hvector.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_dup.o type_dup.o' $(srcdir)/type_dup.c >$(DEPS_DIR)/type_dup.d
	echo "include $(DEPS_DIR)/type_dup.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_get_envelope.o type_get_envelope.o' $(srcdir)/type_get_envelope.c >$(DEPS_DIR)/type_get_envelope.d
	echo "include $(DEPS_DIR)/type_get_envelope.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_get_contents.o type_get_contents.o' $(srcdir)/type_get_contents.c >$(DEPS_DIR)/type_get_contents.d
	echo "include $(DEPS_DIR)/type_get_contents.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_ub.o type_ub.o' $(srcdir)/type_ub.c >$(DEPS_DIR)/type_ub.d
	echo "include $(DEPS_DIR)/type_ub.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_lb.o type_lb.o' $(srcdir)/type_lb.c >$(DEPS_DIR)/type_lb.d
	echo "include $(DEPS_DIR)/type_lb.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_get_extent.o type_get_extent.o' $(srcdir)/type_get_extent.c >$(DEPS_DIR)/type_get_extent.d
	echo "include $(DEPS_DIR)/type_get_extent.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_get_true_extent.o type_get_true_extent.o' $(srcdir)/type_get_true_extent.c >$(DEPS_DIR)/type_get_true_extent.d
	echo "include $(DEPS_DIR)/type_get_true_extent.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_match_size.o type_match_size.o' $(srcdir)/type_match_size.c >$(DEPS_DIR)/type_match_size.d
	echo "include $(DEPS_DIR)/type_match_size.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_struct.o type_create_struct.o' $(srcdir)/type_create_struct.c >$(DEPS_DIR)/type_create_struct.d
	echo "include $(DEPS_DIR)/type_create_struct.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_hindexed.o type_create_hindexed.o' $(srcdir)/type_create_hindexed.c >$(DEPS_DIR)/type_create_hindexed.d
	echo "include $(DEPS_DIR)/type_create_hindexed.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_hvector.o type_create_hvector.o' $(srcdir)/type_create_hvector.c >$(DEPS_DIR)/type_create_hvector.d
	echo "include $(DEPS_DIR)/type_create_hvector.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_pack_external.o pack_external.o' $(srcdir)/pack_external.c >$(DEPS_DIR)/pack_external.d
	echo "include $(DEPS_DIR)/pack_external.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_pack_external_size.o pack_external_size.o' $(srcdir)/pack_external_size.c >$(DEPS_DIR)/pack_external_size.d
	echo "include $(DEPS_DIR)/pack_external_size.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_unpack_external.o unpack_external.o' $(srcdir)/unpack_external.c >$(DEPS_DIR)/unpack_external.d
	echo "include $(DEPS_DIR)/unpack_external.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_indexed_block.o type_create_indexed_block.o' $(srcdir)/type_create_indexed_block.c >$(DEPS_DIR)/type_create_indexed_block.d
	echo "include $(DEPS_DIR)/type_create_indexed_block.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_resized.o type_create_resized.o' $(srcdir)/type_create_resized.c >$(DEPS_DIR)/type_create_resized.d
	echo "include $(DEPS_DIR)/type_create_resized.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_darray.o type_create_darray.o' $(srcdir)/type_create_darray.c >$(DEPS_DIR)/type_create_darray.d
	echo "include $(DEPS_DIR)/type_create_darray.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_type_create_subarray.o type_create_subarray.o' $(srcdir)/type_create_subarray.c >$(DEPS_DIR)/type_create_subarray.d
	echo "include $(DEPS_DIR)/type_create_subarray.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_typeutil.o typeutil.o' $(srcdir)/typeutil.c >$(DEPS_DIR)/typeutil.d
	echo "include $(DEPS_DIR)/typeutil.d" >>$(DEPS_DIR)/newalldeps
	if [ -s $(DEPS_DIR)/newalldeps ] ; then mv -f $(DEPS_DIR)/newalldeps $(DEPS_DIR)/alldeps ; fi
	date >$(DEPS_DIR)/timestamp
include $(DEPS_DIR)/alldeps
# End of Dependencies
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  address.c get_address.c get_count.c get_elements.c pack.c \
	unpack.c pack_size.c status_set_elements.c type_get_name.c \
	type_set_name.c type_size.c type_extent.c type_vector.c type_commit.c \
	type_indexed.c type_hindexed.c type_struct.c type_contiguous.c \
	type_free.c type_hvector.c type_dup.c type_get_envelope.c \
	type_get_contents.c type_ub.c type_lb.c type_get_extent.c \
	type_get_true_extent.c type_match_size.c type_create_struct.c \
	type_create_hindexed.c type_create_hvector.c pack_external.c \
	pack_external_size.c unpack_external.c type_create_indexed_block.c \
	type_create_resized.c type_create_darray.c type_create_subarray.c \
	typeutil.c 
ETAGS           = @ETAGS@ @ETAGSADD@
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
tags: TAGS
TAGS: Makefile${HEADERFILES} ${SOURCEFILES}
	here=`cd ../../.. && pwd` ; cd ${srcdir} && $(ETAGS) -o $$here/TAGS --append ${HEADERFILES} ${SOURCEFILES}
# --------------------------------------------------------------------------

#

FORCE_TARGET:

