# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
VERBOSE         = 1
AR              = @AR@
RANLIB          = @RANLIB@
master_top_srcdir  = @master_top_srcdir@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
top_srcdir      = @top_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@

CC              = @CC@
CFLAGS          = @CFLAGS@
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
DOCTEXT         = @DOCTEXT@
mpi_sources = abort.c init.c initialized.c initthread.c \
 ismain.c finalize.c finalized.c querythread.c 
HEADERS = mpi_init.h
INCLUDES = -I../../include -I${top_srcdir}/src/include -I${top_srcdir}/src/mpi/datatype -I${master_top_srcdir}/src/mpi/spawn

.SUFFIXES:
.SUFFIXES: .o .lo .c .man .html .latex .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)
.c.man:
	$(DOCTEXT) -man -mpath ../../../man/man3 -ext 3 -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.html:
	$(DOCTEXT) -html -mpath ../../../www/www3  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.latex:
	$(DOCTEXT) -latex -mpath ../../../doc/refman  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../../../ \
	-configdir=. \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../../../ && \
	if [ -x config.status ] ; then CONFIG_FILES=src/mpi/init/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 .libstamp2 .libstamp3 
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean:  distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: .libstamp0 ../../../lib/lib${MPILIBNAME}.a
	@if [ -n "@NO_WEAK_SYM@" ] ; then \
	    ${MAKE} .libstamp2 ; \
	fi
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 ; \
	    if [ -n "@NO_WEAK_SYM@" ] ; then \
	        ${MAKE} .libstamp3 ; \
	    fi ; \
	fi

.libstamp0 ../../../lib/lib${MPILIBNAME}.a: abort.o init.o initialized.o \
	initthread.o ismain.o finalize.o finalized.o querythread.o initinfo.o 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.a $?
	${RANLIB} ../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../lib/lib${MPILIBNAME}.la: abort.lo init.lo initialized.lo \
	initthread.lo ismain.lo finalize.lo finalized.lo querythread.lo \
	initinfo.lo 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1

# --------------------------------------------------------------------------
.libstamp2: _abort.o _init.o _initialized.o _initthread.o _ismain.o _finalize.o \
	_finalized.o _querythread.o 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  RANLIB          lib${PMPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${PMPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${PMPILIBNAME}.a
	date > .libstamp2
.libstamp3: _abort.lo _init.lo _initialized.lo _initthread.lo _ismain.lo _finalize.lo \
	_finalized.lo _querythread.lo 
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.la $?; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.la $?
	date > .libstamp3
_abort.o: abort.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/abort.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/abort.c -o _abort.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/abort.c -o _abort.o
_abort.lo: abort.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/abort.c -o _abort.lo
_init.o: init.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/init.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/init.c -o _init.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/init.c -o _init.o
_init.lo: init.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/init.c -o _init.lo
_initialized.o: initialized.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/initialized.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/initialized.c -o _initialized.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/initialized.c -o _initialized.o
_initialized.lo: initialized.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/initialized.c -o _initialized.lo
_initthread.o: initthread.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/initthread.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/initthread.c -o _initthread.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/initthread.c -o _initthread.o
_initthread.lo: initthread.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/initthread.c -o _initthread.lo
_ismain.o: ismain.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/ismain.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/ismain.c -o _ismain.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/ismain.c -o _ismain.o
_ismain.lo: ismain.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/ismain.c -o _ismain.lo
_finalize.o: finalize.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/finalize.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/finalize.c -o _finalize.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/finalize.c -o _finalize.o
_finalize.lo: finalize.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/finalize.c -o _finalize.lo
_finalized.o: finalized.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/finalized.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/finalized.c -o _finalized.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/finalized.c -o _finalized.o
_finalized.lo: finalized.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/finalized.c -o _finalized.lo
_querythread.o: querythread.c
	@if [ "x$(VERBOSE)" != "x1" ] ; then \
	  echo "  CC              ${srcdir}/querythread.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/querythread.c -o _querythread.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/querythread.c -o _querythread.o
_querythread.lo: querythread.c
	$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/querythread.c -o _querythread.lo
# --------------------------------------------------------------------------
coverage: 
	-@for file in ${mpi_sources} initinfo.c ; do \
		gcov -b -f $$file ; done
# --------------------------------------------------------------------------
mandoc: ${mpi_sources:.c=.man}
htmldoc: ${mpi_sources:.c=.html}
latexdoc: ${mpi_sources:.c=.latex}
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dependencies
DEPS_DIR = .deps
MAKE_DEPEND_C   = @MAKE_DEPEND_C@ $(DEFS) $(INCLUDES) $(CPPFLAGS)

dependencies: $(DEPS_DIR)/timestamp
$(DEPS_DIR)/abort.d: $(srcdir)/abort.c
	$(MAKE_DEPEND_C) -MT '_abort.o abort.o' $(srcdir)/abort.c >$(DEPS_DIR)/abort.d
$(DEPS_DIR)/init.d: $(srcdir)/init.c
	$(MAKE_DEPEND_C) -MT '_init.o init.o' $(srcdir)/init.c >$(DEPS_DIR)/init.d
$(DEPS_DIR)/initialized.d: $(srcdir)/initialized.c
	$(MAKE_DEPEND_C) -MT '_initialized.o initialized.o' $(srcdir)/initialized.c >$(DEPS_DIR)/initialized.d
$(DEPS_DIR)/initthread.d: $(srcdir)/initthread.c
	$(MAKE_DEPEND_C) -MT '_initthread.o initthread.o' $(srcdir)/initthread.c >$(DEPS_DIR)/initthread.d
$(DEPS_DIR)/ismain.d: $(srcdir)/ismain.c
	$(MAKE_DEPEND_C) -MT '_ismain.o ismain.o' $(srcdir)/ismain.c >$(DEPS_DIR)/ismain.d
$(DEPS_DIR)/finalize.d: $(srcdir)/finalize.c
	$(MAKE_DEPEND_C) -MT '_finalize.o finalize.o' $(srcdir)/finalize.c >$(DEPS_DIR)/finalize.d
$(DEPS_DIR)/finalized.d: $(srcdir)/finalized.c
	$(MAKE_DEPEND_C) -MT '_finalized.o finalized.o' $(srcdir)/finalized.c >$(DEPS_DIR)/finalized.d
$(DEPS_DIR)/querythread.d: $(srcdir)/querythread.c
	$(MAKE_DEPEND_C) -MT '_querythread.o querythread.o' $(srcdir)/querythread.c >$(DEPS_DIR)/querythread.d
$(DEPS_DIR)/initinfo.d: $(srcdir)/initinfo.c
	$(MAKE_DEPEND_C) -MT '_initinfo.o initinfo.o' $(srcdir)/initinfo.c >$(DEPS_DIR)/initinfo.d
$(DEPS_DIR)/timestamp: ${mpi_sources} initinfo.c Makefile
	rm -f $(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_abort.o abort.o' $(srcdir)/abort.c >$(DEPS_DIR)/abort.d
	echo "include $(DEPS_DIR)/abort.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_init.o init.o' $(srcdir)/init.c >$(DEPS_DIR)/init.d
	echo "include $(DEPS_DIR)/init.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_initialized.o initialized.o' $(srcdir)/initialized.c >$(DEPS_DIR)/initialized.d
	echo "include $(DEPS_DIR)/initialized.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_initthread.o initthread.o' $(srcdir)/initthread.c >$(DEPS_DIR)/initthread.d
	echo "include $(DEPS_DIR)/initthread.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_ismain.o ismain.o' $(srcdir)/ismain.c >$(DEPS_DIR)/ismain.d
	echo "include $(DEPS_DIR)/ismain.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_finalize.o finalize.o' $(srcdir)/finalize.c >$(DEPS_DIR)/finalize.d
	echo "include $(DEPS_DIR)/finalize.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_finalized.o finalized.o' $(srcdir)/finalized.c >$(DEPS_DIR)/finalized.d
	echo "include $(DEPS_DIR)/finalized.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_querythread.o querythread.o' $(srcdir)/querythread.c >$(DEPS_DIR)/querythread.d
	echo "include $(DEPS_DIR)/querythread.d" >>$(DEPS_DIR)/newalldeps
	$(MAKE_DEPEND_C) -MT '_initinfo.o initinfo.o' $(srcdir)/initinfo.c >$(DEPS_DIR)/initinfo.d
	echo "include $(DEPS_DIR)/initinfo.d" >>$(DEPS_DIR)/newalldeps
	if [ -s $(DEPS_DIR)/newalldeps ] ; then mv -f $(DEPS_DIR)/newalldeps $(DEPS_DIR)/alldeps ; fi
	date >$(DEPS_DIR)/timestamp
include $(DEPS_DIR)/alldeps
# End of Dependencies
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  abort.c init.c initialized.c initthread.c ismain.c \
	finalize.c finalized.c querythread.c initinfo.c 
ETAGS           = @ETAGS@ @ETAGSADD@
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
tags: TAGS
TAGS: Makefile${HEADERFILES} ${SOURCEFILES}
	here=`cd ../../.. && pwd` ; cd ${srcdir} && $(ETAGS) -o $$here/TAGS --append ${HEADERFILES} ${SOURCEFILES}
# --------------------------------------------------------------------------
# Note that initinfo is only in the MPI library, not the profile library
#

FORCE_TARGET:

